<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>uuid</key>
	<string>77AC23B6-8A90-11D9-BAA4-000A9584EC8X</string>
	<key>name</key>
	<string>XYPlorer</string>
	<key>scopeName</key>
	<string>source.xys</string>
	<key>fileTypes</key>
		<array>
		<string>xys</string>
		<string>inc</string>
		<string>xyi</string>
		</array>

	<key>patterns</key>
	<array>
		<dict>
			<key>name</key>
			<string>comment.line.xys</string>
			<key>match</key>
			<string>(?&lt;!tp:)//.*?$</string>  <!-- exclude tp:  at the begining to avoid http:// and ftp:// -->
		</dict>

		<dict>
			<key>name</key>
			<string>comment.block.xys</string>
			<key>begin</key>
			<string>/\*</string>   <!-- JSON-Escaped \  and * -->
			<key>end</key>
			<string>\*/</string>  <!-- Regex-Escaped * and / -->
		</dict>

		<dict>
			<key>name</key>
			<string>entity.name.function.xys</string>   <!-- Some functions need round bracket such as abs() -->
			<key>match</key>
			<string>(?i)\b(?:abs|asc|attrstamp|base64encode|base64decode|catalogreport|ceil|chr|colorfilter|columnlayout|compare|confirm|copier|ctbicon|ctbname|ctbstate|datediff|eval|exists|extracttext|extratag|filesequal|filesize|filetype|floor|folderreport|foldersize|format|formatbytes|formatdate|formatlist|get|getkey|getpathcomponent|getsectionlist|gettoken|gettokenindex|hash|hexdump|hextodec|html|input|inputfile|inputfolder|inputselect|isset|isunicode|listfolder|listpane|loadlayout|md5|new|now|paperfolder|popupmenu|property|quote|rand|readfile|readurl|recase|refreshperms|regexmatches|regexreplace|renameitem|replace|replacelist|report|resolvepath|round|runret|self|SaveThumb|setcolumns|seticons|setlayout|strlen|strpos|strrepeat|substr|sync|tab|tabset|tagitems|taglist|toolbar|trim|urldecode|urlencode|utf8decode|utf8encode|writefile|zip_add|zip_extract|zip_list)(?=\()</string>    <!-- (?i) = Case-insensitive;  \b = whole-word   (?: = No backreference, just to improve speed-->
		</dict>

		<dict>
			<key>name</key>
			<string>entity.name.function.xys</string>  <!-- Some functions don't need round bracket -->
			<key>match</key>
			<string>(?i)\b(?:assert|backupto|beep|box|br|break|button|catalogload|charview|continue|copy|copyas|copydata|copyitem|copytext|copyto|delete|download|DUAL:|echo|end|exit|filter|focus|fresh|freshhere|global|goto|hashlist|highlight|incr|internetflags|load|loadsearch|loadtree|makecoffee|moveas|moveto|msg|open|openwith|perm|popupmainmenu|quickfileview|readpv|releaseglobals|rename|return|rotate|rtfm|run|savesettings|sel|selectitems|selfilter|seltab|sendkeys|set|setkey|setting|settingp|showhash|sortby|sound|status|sub|swapnames|tag|text|timestamp|unset|unthumb|wait|wipe|writepv)\b</string>    <!-- (?i) = Case-insensitive;  \b \b = whole-word   (?: = No backreference, just to improve speed-->
		</dict>

		<dict>
			<key>name</key>
			<string>entity.name.function.CommandID.xys</string>
			<key>match</key>
			<string>(?&lt;!\w)#\d{1,4}(?!\w)</string>
		</dict>

		<dict>
			<key>name</key>
			<string>keyword.control.xys</string>
			<key>match</key>
			<string>\b(?i)(?:step|unstep|break|continue|while|if|else|elseif|foreach)\b</string>    <!-- (?i) = Case-insensitive;  \b = whole-word   (?: = No backreference, just to improve speed-->
		</dict>

		<dict>
			<key>name</key>
			<string>variable.parameter.xys</string>
			<key>match</key>
			<string>\|:\w+|(?i)\$\w+|\{:(Text|Image|Photo|Audio|Video|Media|Font|Vector|Web|Office|Archive|Executable)\}</string>
		</dict>

		<dict>
			<key>name</key>
			<string>variable.parameter.native.xys</string>
			<key>match</key>
			<string>&lt;[ .,\*\|\#\:\-\+\w]+&gt;|%\w+%|{Name}|{Ext}|{Size}|{Type}|{Created}|{Modified}| {Accessed}|{Attr}|{Len}|{Label}|{Tags}|{Comment}|{Total Size}|{Used Space}|{Free Space}|{Free %}|{Per Cluster}|{Vol Serial}|{File System}</string>          <!-- Original Regex:  \$\w+|<\w+>  then escaped in accordance with XML -->
		</dict>

		<dict>
			<key>name</key>
			<string>string</string>
			<key>match</key>
			<string>["';]</string>     <!-- If you want to colorize text between quote, use this: (?&lt;=&quot;).+(?=&quot;)    Original Regex:  (?<=").+(?=") then escaped in accordance with xml-->
		</dict>

		<dict>
			<key>name</key>
			<string>constant.numeric.xys</string>
			<key>match</key>
			<string>(?&lt;!\w)-?\d+[/%\.]?(?!\w)</string>  <!-- Original Regex: (?<!\w)-?\d+[/%\.]?(?!\w)   then escaped per XML.  You can also use simple form: \b(\d+)\b -->
		</dict>

		<dict>
			<key>name</key>
			<string>keyword.operator</string>
			<key>match</key>
			<string>([\!)(){},]|[\*\+-\/\^%]|\sUnLikeI\s|\sLikeI\s|\sAND\s|\sOR\s|\sXOR\s|\sNOT\s|\s\|\|\s|\B-\B|=|\s+\.\s+|(?&lt;!\w)&gt;|&lt;(?![\w&lt;])|\B&amp;?\W&amp;\B)</string>   <!--Match:  ! = || LikeI UnLikeI < > & && -->
		</dict>

		<dict>
			<key>name</key>
			<string>keyword.operator.heredoc</string>
			<key>match</key>
			<string>&lt;{3}</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>User defined function (in .inc file)</string>
			<key>match</key>
			<string>(?i)(^function )(.+)(\(.+)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.special.xys</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.class.UDF.xys</string>
				</dict>
			</dict>
		</dict>

		<dict>
			<key>comment</key>
			<string>Allow Contextual Help to Goto Definition</string>
			<key>name</key>
			<string>UDF.xys</string>
			<key>match</key>
			<string>(?&lt;=\s).+(?=\()</string>
		</dict>

	</array>
</dict>
</plist>
